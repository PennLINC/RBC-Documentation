{
  
  "1": {
    "title": "Buttons",
    "content": "Buttons . . Basic button styles Links that look like buttons | Button element | | Using utilities with buttons Button size | Spacing between buttons | | . Basic button styles . Links that look like buttons . Link button . Link button Link button Link button . Link button . [Link button](http://example.com/){: .btn } [Link button](http://example.com/){: .btn .btn-purple } [Link button](http://example.com/){: .btn .btn-blue } [Link button](http://example.com/){: .btn .btn-green } [Link button](http://example.com/){: .btn .btn-outline } . Button element . GitHub Flavored Markdown does not support the button element, so you’ll have to use inline HTML for this: . Button element &lt;button type=&quot;button&quot; name=&quot;button&quot; class=&quot;btn&quot;&gt;Button element&lt;/button&gt; . . Using utilities with buttons . Button size . Wrap the button in a container that uses the font-size utility classes to scale buttons: . Big ass button . Tiny ass button . &lt;span class=&quot;fs-8&quot;&gt; [Link button](http://example.com/){: .btn } &lt;/span&gt; &lt;span class=&quot;fs-3&quot;&gt; [Tiny ass button](http://example.com/){: .btn } &lt;/span&gt; . Spacing between buttons . Use the margin utility classes to add spacing between two buttons in the same block. . Button with space Button . Button with more space Button . [Button with space](http://example.com/){: .btn .btn-purple .mr-2 } [Button ](http://example.com/){: .btn .btn-blue } [Button with more space](http://example.com/){: .btn .btn-green .mr-4 } [Button ](http://example.com/){: .btn .btn-blue } .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/ui-components/buttons/",
    "relUrl": "/docs/just-the-docs_documentation/ui-components/buttons/"
  }
  ,"2": {
    "title": "Code",
    "content": "Code . . Inline code | Syntax highlighted code blocks | Code blocks with rendered examples | . Inline code . Code can be rendered inline by wrapping it in single back ticks. . Lorem ipsum dolor sit amet, &lt;inline code snippet&gt; adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. . Lorem ipsum dolor sit amet, `&lt;inline code snippet&gt;` adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. . . Syntax highlighted code blocks . Use Jekyll’s built-in syntax highlighting with Rouge for code blocks by using three backticks, followed by the language name: . // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . js // Javascript code with syntax highlighting. var fun = function lang(l) { dateformat.i18n = require(&#39;./lang/&#39; + l) return true; } . . Code blocks with rendered examples . To demonstrate front end code, sometimes it’s useful to show a rendered example of that code. After including the styles from your project that you’ll need to show the rendering, you can use a &lt;div&gt; with the code-example class, followed by the code block syntax. If you want to render your output with Markdown instead of HTML, use the markdown=&quot;1&quot; attribute to tell Jekyll that the code you are rendering will be in Markdown format… This is about to get meta… . Link button . [Link button](http://example.com/){: .btn } . &lt;div class=&quot;code-example&quot; markdown=&quot;1&quot;&gt; [Link button](http://example.com/){: .btn } &lt;/div&gt; markdown [Link button](http://example.com/){: .btn } .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/ui-components/code/",
    "relUrl": "/docs/just-the-docs_documentation/ui-components/code/"
  }
  ,"3": {
    "title": "Color",
    "content": "Color Utilities . . Light Greys | Dark Greys | Purples | Blues | Greens | Yellows | Reds | . All the colors used in Just the Docs have been systematized into a series of variables that have been extended to both font color and background color utility classes. . Light Greys . Color value Font color utility Background color utility . grey-lt-000 | .text-grey-lt-000 | .bg-grey-lt-000 | . grey-lt-100 | .text-grey-lt-100 | .bg-grey-lt-100 | . grey-lt-200 | .text-grey-lt-200 | .bg-grey-lt-200 | . grey-lt-300 | .text-grey-lt-300 | .bg-grey-lt-300 | . Dark Greys . Color value Font color utility Background color utility . grey-dk-000 | .text-grey-dk-000 | .bg-grey-dk-000 | . grey-dk-100 | .text-grey-dk-100 | .bg-grey-dk-100 | . grey-dk-200 | .text-grey-dk-200 | .bg-grey-dk-200 | . grey-dk-250 | .text-grey-dk-250 | .bg-grey-dk-250 | . grey-dk-300 | .text-grey-dk-300 | .bg-grey-dk-300 | . Purples . Color value Font color utility Background color utility . purple-000 | .text-purple-000 | .bg-purple-000 | . purple-100 | .text-purple-100 | .bg-purple-100 | . purple-200 | .text-purple-200 | .bg-purple-200 | . purple-300 | .text-purple-300 | .bg-purple-300 | . Blues . Color value Font color utility Background color utility . blue-000 | .text-blue-000 | .bg-blue-000 | . blue-100 | .text-blue-100 | .bg-blue-100 | . blue-200 | .text-blue-200 | .bg-blue-200 | . blue-300 | .text-blue-300 | .bg-blue-300 | . Greens . Color value Font color utility Background color utility . green-000 | .text-green-000 | .bg-green-000 | . green-100 | .text-green-100 | .bg-green-100 | . green-200 | .text-green-200 | .bg-green-200 | . green-300 | .text-green-300 | .bg-green-300 | . Yellows . Color value Font color utility Background color utility . yellow-000 | .text-yellow-000 | .bg-yellow-000 | . yellow-100 | .text-yellow-100 | .bg-yellow-100 | . yellow-200 | .text-yellow-200 | .bg-yellow-200 | . yellow-300 | .text-yellow-300 | .bg-yellow-300 | . Reds . Color value Font color utility Background color utility . red-000 | .text-red-000 | .bg-red-000 | . red-100 | .text-red-100 | .bg-red-100 | . red-200 | .text-red-200 | .bg-red-200 | . red-300 | .text-red-300 | .bg-red-300 | .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/utilities/color/",
    "relUrl": "/docs/just-the-docs_documentation/utilities/color/"
  }
  ,"4": {
    "title": "Configuration",
    "content": "Configuration . Just the Docs has some specific configuration parameters that can be defined in your Jekyll site’s _config.yml file. . . Site logo | Search | Aux links | Heading anchor links | Footer content | Color scheme | Google Analytics | . View this site’s _config.yml file as an example. . Site logo . # Set a path/url to a logo that will be displayed instead of the title logo: &quot;/assets/images/just-the-docs.png&quot; . Search . # Enable or disable the site search # Supports true (default) or false search_enabled: true # Enable support for hyphenated search words: search_tokenizer_separator: /[ s/]+/ . Aux links . # Aux links for the upper right navigation aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/PennLINC/PennLINC.github.io&quot; . Heading anchor links . # Heading anchor links appear on hover over h1-h6 tags in page content # allowing users to deep link to a particular heading on a page. # # Supports true (default) or false/nil heading_anchors: true . Footer content . # Footer content appears at the bottom of every page&#39;s main content footer_content: &quot;Copyright &amp;copy; 2017-2019 Patrick Marsceill. Distributed by an &lt;a href= &quot;https://github.com/PennLINC/PennLINC.github.io/tree/master/LICENSE.txt &quot;&gt;MIT license.&lt;/a&gt;&quot; . Color scheme . # Color scheme currently only supports &quot;dark&quot; or nil (default) color_scheme: &quot;dark&quot; . Preview dark color scheme . See Customization for more information. . Google Analytics . # Google Analytics Tracking (optional) # e.g, UA-1234567-89 ga_tracking: UA-5555555-55 .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/configuration/",
    "relUrl": "/docs/just-the-docs_documentation/configuration/"
  }
  ,"5": {
    "title": "Documentation",
    "content": "Here, find all you need to know about contributing to this site and project documentation. .",
    "url": "http://localhost:4000/docs/Contributing/contributing/",
    "relUrl": "/docs/Contributing/contributing/"
  }
  ,"6": {
    "title": "Customization",
    "content": "Customization . . Color schemes | . Color schemes . New . Just the Docs supports two color schemes: light (default), and dark. . To enable a color scheme, set the color_scheme parameter in your site’s _config.yml file: .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/customization/",
    "relUrl": "/docs/just-the-docs_documentation/customization/"
  }
  ,"7": {
    "title": "Datasets",
    "content": "Title . Subtitle . Content goes here . Conclusion . Conclusion goes here .",
    "url": "http://localhost:4000/docs/pipelines/datasets/",
    "relUrl": "/docs/pipelines/datasets/"
  }
  ,"8": {
    "title": "Datasets",
    "content": "Title . Subtitle . Content goes here . Conclusion . Conclusion goes here .",
    "url": "http://localhost:4000/docs/imaging/datasets/",
    "relUrl": "/docs/imaging/datasets/"
  }
  ,"9": {
    "title": "Datasets",
    "content": "Title . Subtitle . Content goes here . Conclusion . Conclusion goes here .",
    "url": "http://localhost:4000/docs/demographics/datasets/",
    "relUrl": "/docs/demographics/datasets/"
  }
  ,"10": {
    "title": "Writing Your Own Docs",
    "content": "Writing Your Own Documentation . . Getting Started Scenario 1: Starting New Documentation | Scenario 2: Contributing to Existing Documentation | | Formatting | Committing Your Changes | Merge Conflicts &amp; Syncing | For Professionals Getting Started | How To Test Locally | | . “Documentation is a love letter you write to yourself” . - Damian Conway . In this documentation about documentation, we’re going to outline how you can start writing documentation for your work and contribute to this site. . Getting Started . You will need a Github account to be able to contribute; this website is automatically generated by a code repository on Github and is written primarily in markdown, so that’s where we’re going to keep our focus on this task. There is no requirement that you have prior knowledge about how to code, and the first part of this tutorial will focus on contributing via the Github web interface (so you have nothing to download). . Scenario 1: Starting New Documentation . As a prerequisite to starting new documentation, you should have an idea of where this tutorial may fit in the context of the site. just-the-docs’ structure allows us to create nested directories (folders) so we can organize our thoughts and documents efficiently. If this documentation fits under another topic, please create a new file in the appropriate folder. Otherwise, create a new folder for the topic. . All folders should fall under RBC-Documentation/docs/, and often a single markdown file is enough for some documentation — it would be the ‘homepage’ of that topic. . RBC-Documentation/docs/foo/foo_processing.md` . In this case, you can create a new file right from the Github: . . Note: you don’t have to explicitly create folders in the Github web interface; just type out your filename and path with backslashes and Github will automatically create the directory structure for you. . Scenario 2: Contributing to Existing Documentation . If, on the other hand, you are contributing to existing documentation, then the process is simpler. All you will need to do is navigate to the file on Github, and click the edit button to begin editing: . . Formatting . Markdown is a great language to write documentation in. It is flexible, yet explicit, and easy to pick up. See this guide for more on markdown. . Importantly, you must also include a YAML header in all of your markdown files. YAML (YetAnotherMarkdownLanguage) is a language used to create headers in markdown files, and these headers provide specific instructions to other programs on how to render a markdown document. YAML headers are begun right at the top of the document and are fenced in by 3 hyphens. Anything within a YAML header is of the form key: value, and the keys can describe a number of things. For example, this document’s YAML header is: . layout: default title: Writing Your Own Docs parent: Contributing has_toc: true nav_order: 1 . The layout and title are self explanatory. parent describes the fact that this page is a child page of the Contributing document, and has_toc tells the renderer that this page should have a table of contents. For more on the available YAML header options for this site, see this page. . Committing Your Changes . Once your edits are complete, you will need to commit them to the repository. This basically means you are happy with the changes you’ve made to the code, and you want to take a snapshot of it in this state; additionally, committing code to this repository is the mechanism that causes new data to render automatically to the website. While you write in markdown, you can also preview the format of the changes in Github’s web page using the “preview” button (see below). . We recommend, if you are unfamiliar with how this works under the hood, that you always commit your changes to a new branch (i.e. a separate version) so that someone can review and test your changes in a Pull Request (a code proposition, if you will). You can change and describe the branch you’re committing to at the bottom of the page: . . On the next page you can explicitly ask for someone to review the changes to your code before they are merged into the main codebase, after which, the changes are rendered. . . When you are ready, hit “Submit” and your code will be reviewed and merged into the code base. Once this is done, your new documentation will show up automatically on the website in a matter of minutes! . Merge Conflicts &amp; Syncing . Sometimes, when you’ve been working on contributing code, you may find that someone else has been working on the same file. This creates a merge conflict when you try to put your changes together. To solve this, it may be necessary to get your files back on track with whatever has happened while you were editing — this is called syncing your fork, and is basically everything we discussed above but in reverse. The steps are as follows (we will use the terms “you” to denote your forked repository, and “them” to denote the repository you forked from): . Use the Github compare tool to compare your repository against the one you forked; initially, it will have theirs as the base repository on the left, and your fork as the head repository on the right. This means a pull request will ask to merge head into base… We want to accomplish the opposite! . | Switch the base repository to your fork; you’ll now get a message that says you have no changes to compare (it is you comparing with you, after all). . | Click on “compare against forks” at the top, and change the head (on the right) to their repository. . | Now you can see the commits that they made since you forked and started working, if any; from this page, start a pull request, which is essentially you, asking you, if you want their commits added to your fork. . | You can see this process explained in further detail here and here. . For Professionals . This section describes how to accomplish the above workflow on your local machine, and test it there before committing changes. . Getting Started . One preferred way to add documentation is to spin up and run a webpage on your local machine, which will dynamically and automatically update as you write. You can then test and review changes as they would appear on the website without risk of damaging the public-facing site and without going back and forth with the commit workflow above. Sounds great, huh? . To do this, though, there is a little bit of overhead, mainly: . A web browser (duh) | A program called ruby | A program called jekyll | ruby is a popular language for web development and has a multitude of templates available, so it makes sense that this website is built on one of them. jekyll on the other hand is what’s called a static site generator. It takes written documents and parses them into static websites (i.e. ones that don’t need interactive features or a database backend). jekyll uses ruby to create pretty websites, while Github uses jekyll to publish websites on the internet for users and projects. Make sense? If not, it’s no matter. You will only need to do a few main things to get started with local testing for contributing to this site. . How To Test Locally . First, clone this repository to your local machine: . git clone https://github.com/PennLINC/RBC-Documentation.git . Next, make sure you have Ruby installed; the best way to check this is to do which ruby, and if there is no ruby program found, it’s recommended you install it with brew (most Linux and MacOS machines already use brew as a package manager akin to pip or npm, see this guide to find out how to install brew first if you don’t have it). . To install ruby, just do: . brew install ruby # YOU SHOULD PROBABLY ALSO ADD IT TO YOUR PATH LIKE SO: echo &#39;export PATH=&quot;/usr/local/opt/ruby/bin:$PATH&quot;&#39; &gt;&gt; ~/.bash_profile . Now install jekyll using a ruby “gem”, by doing the following: . # PERMISSIONS MAY BE REQUIRED gem install --user-install bundler jekyll . In this last step, you instruct jekyll to take all of the templates and files in the current directory and spin them up into a webpage, and ruby will serve it on your local machine. The instruction for this, from the root directory of the repo: . cd RBC-Documentation bundle exec jekyll serve . If you see something like this: . Configuration file: /Users/mac/BBL/PennLINC.github.io/_config.yml Source: /Users/mac/BBL/PennLINC.github.io Destination: /Users/mac/BBL/PennLINC.github.io/_site Incremental build: disabled. Enable with --incremental Generating... done in 4.378 seconds. Auto-regeneration: enabled for &#39;/Users/mac/BBL/PennLINC.github.io&#39; Server address: http://127.0.0.1:4000// Server running... press ctrl-c to stop. . You’re in business! Just visit http://127.0.0.1:4000// in your web browser to view the local version of PennLINC.github.io! . Now, you can edit files locally in docs/, and whenever you save the file, the local web page will update to reflect those changes! When you’re done, hit CTRL-C to stop serving the site, and then commit and push your changes to Github to put them on the internet. .",
    "url": "http://localhost:4000/docs/Contributing/documentation_guidelines/",
    "relUrl": "/docs/Contributing/documentation_guidelines/"
  }
  ,"11": {
    "title": "Welcome",
    "content": "Welcome to The RBC Documentation . If you’d like to contribute to the development of this site, please this page. Submit an issue or Pull Request, so it can be reviewed and added to the site. . Thank you to the contributors for LINC tutorials! . . This documentation website was created using Jekyll and Github pages; the template is just-the-docs. .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"12": {
    "title": "just-the-docs",
    "content": "How to use just-the-docs . We’ve archived these pages here for documentation on how to create just-the-docs pages. However, the official project’s documentation will most likely be more up to date. .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/index",
    "relUrl": "/docs/just-the-docs_documentation/index"
  }
  ,"13": {
    "title": "Demographic Data",
    "content": "Demographic Data . This section documents the imaging data collected and processed. .",
    "url": "http://localhost:4000/docs/demographics/",
    "relUrl": "/docs/demographics/"
  }
  ,"14": {
    "title": "Imaging Data",
    "content": "Imaging Data . This section documents the imaging data collected and processed. .",
    "url": "http://localhost:4000/docs/imaging/",
    "relUrl": "/docs/imaging/"
  }
  ,"15": {
    "title": "Pipelines",
    "content": "Preprocessing Pipelines . This section documents what preprocessed outputs are available and the pipeline configurations used to generate them. .",
    "url": "http://localhost:4000/docs/pipelines/",
    "relUrl": "/docs/pipelines/"
  }
  ,"16": {
    "title": "Citing",
    "content": "Citing this Project . To cite this project, please use Some DOI. . Publications that have used this project’s data include: . pub1 | pub2 | pub3 | .",
    "url": "http://localhost:4000/docs/Citing/",
    "relUrl": "/docs/Citing/"
  }
  ,"17": {
    "title": "Labels",
    "content": "Labels . Use labels as a way to add an additional mark to a section of your docs. Labels come in a few colors. By default, labels will be blue. . Default label . Blue label . Stable . New release . Coming soon . Deprecated . Default label {: .label } Blue label {: .label .label-blue } Stable {: .label .label-green } New release {: .label .label-purple } Coming soon {: .label .label-yellow } Deprecated {: .label .label-red } .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/ui-components/labels/",
    "relUrl": "/docs/just-the-docs_documentation/ui-components/labels/"
  }
  ,"18": {
    "title": "Layout",
    "content": "Layout Utilities . . Spacing | Vertical Alignment | Display | . Spacing . These spacers are available to use for margins and padding with responsive utility classes. Combine these prefixes with a screen size and spacing scale to use them responsively. . Classname prefix What it does . .m- | margin | . .mx- | margin-left, margin-right | . .my- | margin top, margin bottom | . .mt- | margin-top | . .mr- | margin-right | . .mb- | margin-bottom | . .ml- | margin-left | . Classname prefix What it does . .p- | padding | . .px- | padding-left, padding-right | . .py- | padding top, padding bottom | . .pt- | padding-top | . .pr- | padding-right | . .pb- | padding-bottom | . .pl- | padding-left | . Spacing values are based on a 1rem = 16px spacing scale, broken down into these units: . Spacer/suffix Size in rems Rem converted to px . 1 | 0.25rem | 4px | . 2 | 0.5rem | 8px | . 3 | 0.75rem | 12px | . 4 | 1rem | 16px | . 5 | 1.5rem | 24px | . 6 | 2rem | 32px | . 7 | 2.5rem | 40px | . 8 | 3rem | 48px | . Examples . In Markdown, use the {: } wrapper to apply custom classes: . This paragraph will have a margin bottom of 1rem/16px at large screens. {: .mb-lg-4 } This paragraph will have 2rem/32px of padding on the right and left at all screen sizes. {: .px-6 } . Vertical Alignment . Classname What it does . .v-align-baseline | vertical-align: baseline | . .v-align-bottom | vertical-align: bottom | . .v-align-middle | vertical-align: middle | . .v-align-text-bottom | vertical-align: text-bottom | . .v-align-text-top | vertical-align: text-top | . .v-align-top | vertical-align: top | . Display . Display classes aid in adapting the layout of the elements on a page: . Class   . .d-block | display: block | . .d-flex | display: flex | . .d-inline | display: inline | . .d-inline-block | display: inline-block | . .d-none | display: none | . Use these classes in conjunction with the responsive modifiers. . Examples . In Markdown, use the {: } wrapper to apply custom classes: . This button will be hidden until medium screen sizes: [ A button ](#url) {: .d-none .d-md-inline-block } These headings will be `inline-block`: ### heading 3 {: .d-inline-block } ### heading 3 {: .d-inline-block } .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/utilities/layout/",
    "relUrl": "/docs/just-the-docs_documentation/utilities/layout/"
  }
  ,"19": {
    "title": "Lists",
    "content": "Lists . . Unordered list | Ordered list | Task list | Definition list | . Most lists can be rendered with pure Markdown. . Unordered list . Item 1 | Item 2 | Item 3 | . or . Item 1 | Item 2 | Item 3 | . - Item 1 - Item 2 - Item 3 _or_ * Item 1 * Item 2 * Item 3 . Ordered list . Item 1 | Item 2 | Item 3 | 1. Item 1 1. Item 2 1. Item 3 . Task list . hello, this is a todo item | hello, this is another todo item | goodbye, this item is done | . - [ ] hello, this is a todo item - [ ] hello, this is another todo item - [x] goodbye, this item is done . Definition list . Definition lists require HTML syntax and aren’t supported with the GitHub Flavored Markdown compiler. . Name Godzilla Born 1952 Birthplace Japan Color Green &lt;dl&gt; &lt;dt&gt;Name&lt;/dt&gt; &lt;dd&gt;Godzilla&lt;/dd&gt; &lt;dt&gt;Born&lt;/dt&gt; &lt;dd&gt;1952&lt;/dd&gt; &lt;dt&gt;Birthplace&lt;/dt&gt; &lt;dd&gt;Japan&lt;/dd&gt; &lt;dt&gt;Color&lt;/dt&gt; &lt;dd&gt;Green&lt;/dd&gt; &lt;/dl&gt; .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/ui-components/lists/",
    "relUrl": "/docs/just-the-docs_documentation/ui-components/lists/"
  }
  ,"20": {
    "title": "Navigation Structure",
    "content": "Navigation Structure . . Main navigation | Ordering pages | Excluding pages | Pages with children Child pages | Auto-generating Table of Contents | Children with children | | Auxiliary Navigation | In-page navigation with Table of Contents | . Main navigation . The main navigation for your Just the Docs site is on the left side of the page at large screens and on the top (behind a tap) on small screens. The main navigation can be structured to accommodate a multi-level menu system (pages with children and grandchildren). . By default, all pages will appear as top level pages in the main nav unless a parent page is defined (see Pages with Children). . . Ordering pages . To specify a page order, use the nav_order parameter in your pages’ YAML front matter. . Example . layout: default title: Customization nav_order: 4 . . Excluding pages . For specific pages that you do not wish to include in the main navigation, e.g. a 404 page or a landing page, use the nav_exclude: true parameter in the YAML front matter for that page. . Example . layout: default title: 404 nav_exclude: true . . Pages with children . Sometimes you will want to create a page with many children (a section). First, it is recommended that you keep pages that are related in a directory together… For example, in these docs, we keep all of the written documentation in the ./docs directory and each of the sections in subdirectories like ./docs/ui-components and ./docs/utilities. This gives us an organization like: . +-- .. |-- (Jekyll files) | |-- docs | |-- ui-components | | |-- index.md (parent page) | | |-- buttons.md | | |-- code.md | | |-- labels.md | | |-- tables.md | | +-- typography.md | | | |-- utilities | | |-- index.md (parent page) | | |-- color.md | | |-- layout.md | | |-- responsive-modifiers.md | | +-- typography.md | | | |-- (other md files, pages with no children) | +-- .. | |-- (Jekyll files) +-- .. . On the parent pages, add this YAML front matter parameter: . has_children: true (tells us that this is a parent page) | . Example . layout: default title: UI Components nav_order: 2 has_children: true . Here we’re setting up the UI Components landing page that is available at /docs/ui-components, which has children and is ordered second in the main nav. . Child pages . On child pages, simply set the parent: YAML front matter to whatever the parent’s page title is and set a nav order (this number is now scoped within the section). . Example . layout: default title: Buttons parent: UI Components nav_order: 2 . The Buttons page appears as a child of UI Components and appears second in the UI Components section. . Auto-generating Table of Contents . By default, all pages with children will automatically append a Table of Contents which lists the child pages after the parent page’s content. To disable this auto Table of Contents, set has_toc: false in the parent page’s YAML front matter. . Example . layout: default title: UI Components nav_order: 2 has_children: true has_toc: false . Children with children . Child pages can also have children (grandchildren). This is achieved by using a similar pattern on the child and grandchild pages. . Add the has_children attribute to the child | Add the parent and grand_parent attribute to the grandchild | Example . layout: default title: Buttons parent: UI Components nav_order: 2 has_children: true . layout: default title: Buttons Child Page parent: Buttons grand_parent: UI Components nav_order: 1 . This would create the following navigation structure: . +-- .. | |-- UI Components | |-- .. | | | |-- Buttons | | |-- Button Child Page | | | |-- .. | +-- .. . . Auxiliary Navigation . To add a auxiliary navigation item to your site (in the upper right on all pages), add it to the aux_nav configuration option in your site’s _config.yml file. . Example . # Aux links for the upper right navigation aux_links: &quot;Just the Docs on GitHub&quot;: - &quot;//github.com/PennLINC/PennLINC.github.io&quot; . . In-page navigation with Table of Contents . To generate a Table of Contents on your docs pages, you can use the {:toc} method from Kramdown, immediately after an &lt;ol&gt; in Markdown. This will automatically generate an ordered list of anchor links to various sections of the page based on headings and heading levels. There may be occasions where you’re using a heading and you don’t want it to show up in the TOC, so to skip a particular heading use the {: .no_toc } CSS class. . Example . # Navigation Structure {: .no_toc } ## {: .no_toc .text-delta } 1. TOC {:toc} . This example skips the page name heading (#) from the TOC, as well as the heading for the Table of Contents itself (##) because it is redundant, followed by the table of contents itself. .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/navigation-structure/",
    "relUrl": "/docs/just-the-docs_documentation/navigation-structure/"
  }
  ,"21": {
    "title": "Responsive Modifiers",
    "content": "Responsive modifiers . Just the Docs spacing works in conjunction with a variety of modifiers that allow you to target specific screen sizes responsively. Use these in conjunction with spacing and display prefix and suffix classes. . Modifier Screen size . (none) | All screens until the next modifier | . xs | 320px (20rem) and up | . sm | 500px (31.25rem) and up | . md | 740px (46.25rem) and up | . lg | 1120px (70rem) and up | . xl | 1400px (87.5rem) and up | .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/utilities/responsive-modifiers/",
    "relUrl": "/docs/just-the-docs_documentation/utilities/responsive-modifiers/"
  }
  ,"22": {
    "title": "Search",
    "content": "Search . . Set up search Generate search index | Enable search in configuration | | Hiding pages from search | . Just the Docs uses lunr.js to add a client-side search interface powered by a JSON index that Jekyll generates. All search results are shown in an auto-complete style interface (there is no search results page). By default, all generated HTML pages are indexed using the following data points: . Page title | Page content | Page URL | . Set up search . Generate search index . Before you can use search, you must initialize the feature by running this rake command that comes with just-the-docs: . $ bundle exec just-the-docs rake search:init . This command creates the search-data.json file that Jekyll uses to create your search index. Alternatively, you can create the file manually in the assets/js/ directory of your Jekyll site with this content: . {% raw %} { {% assign comma = false %} {% for page in site.html_pages %}{% if page.search_exclude != true %}{% if comma == true%},{% endif %}&quot;{{ forloop.index0 }}&quot;: { &quot;title&quot;: &quot;{{ page.title | replace: &#39;&amp;amp;&#39;, &#39;&amp;&#39; }}&quot;, &quot;content&quot;: &quot;{{ page.content | markdownify | replace: &#39;&lt;/h&#39;, &#39; . &lt;/h&#39; | replace: &#39;&lt;hr&#39;, &#39; . &lt;hr&#39; | replace: &#39;&lt;/p&#39;, &#39; . &lt;/p&#39; | replace: &#39;&lt;/ul&#39;, &#39; . &lt;/ul&#39; | replace: &#39;&lt;/tr&#39;, &#39; . &lt;/tr&#39; | replace: &#39;&lt;/li&#39;, &#39; | &lt;/li&#39; | replace: &#39;&lt;/td&#39;, &#39; | &lt;/td&#39; | strip_html | escape_once | remove: &#39;&#39; | remove: &#39;&#39; | remove: &#39;&#39; | replace: &#39; &#39;, &#39; &#39; | replace: &#39; . &#39;, &#39; . &#39; | replace: &#39; . &#39;, &#39; . &#39; | normalize_whitespace }}&quot;, &quot;url&quot;: &quot;{{ page.url | absolute_url }}&quot;, &quot;relUrl&quot;: &quot;{{ page.url }}&quot; }{% assign comma = true %} {% endif %}{% endfor %} }{% endraw %} . Note: If you don’t run this rake command or create this file manually, search will not work (or it will use the search index data from this docs site, not your site’s content). . Enable search in configuration . In your site’s _config.yml, enable search: . # Enable or disable the site search search_enabled: true . The default is for hyphens to separate tokens in search terms: gem-based is equivalent to gem based, matching either word. To allow search for hyphenated words: . # Set the search token separator search_tokenizer_separator: /[ s/]+/ . Hiding pages from search . Sometimes you might have a page that you don’t want to be indexed for the search nor to show up in search results, e.g, a 404 page. To exclude a page from search, add the search_exclude: true parameter to the page’s YAML front matter: . Example . layout: default title: Page not found nav_exclude: true search_exclude: true .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/search/",
    "relUrl": "/docs/just-the-docs_documentation/search/"
  }
  ,"23": {
    "title": "Tables",
    "content": "Tables . Tables are responsive by default, allowing wide tables to have a horizontal scroll to access columns outside of the normal viewport. . head1 head two three . ok | good swedish fish | nice | . out of stock | good and plenty | nice | . ok | good oreos | hmm | . ok | good zoute drop | yumm | . | head1 | head two | three | |:-|:|:| | ok | good swedish fish | nice | | out of stock | good and plenty | nice | | ok | good `oreos` | hmm | | ok | good `zoute` drop | yumm | .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/ui-components/tables/",
    "relUrl": "/docs/just-the-docs_documentation/ui-components/tables/"
  }
  ,"24": {
    "title": "Typography",
    "content": "Typography . . Font stack | Responsive type scale | Headings | Body text | Inline elements | Typographic Utilities | . Font stack . By default, Just the Docs uses a native system font stack for sans-serif fonts: . -apple-system, BlinkMacSystemFont, &quot;helvetica neue&quot;, helvetica, roboto, noto, &quot;segoe ui&quot;, arial, sans-serif . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . For monospace type, like code snippets or the &lt;pre&gt; element, Just the Docs uses a native system font stack for monospace fonts: . &quot;SFMono-Regular&quot;, Menlo, Consolas, Monospace . ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz . . Responsive type scale . Just the Docs uses a responsive type scale that shifts depending on the viewport size. . Selector Small screen size font-size Large screen size font-size . h1, .text-alpha | 32px | 36px | . h2, .text-beta | 18px | 24px | . h3, .text-gamma | 16px | 18px | . h4, .text-delta | 14px | 16px | . h5, .text-epsilon | 16px | 18px | . h6, .text-zeta | 18px | 24px | . body | 14px | 16px | . . Headings . Headings are rendered like this: . Heading 1 . Heading 2 . Heading 3 . Heading 4 . Heading 5 . Heading 6 . # Heading 1 ## Heading 2 ### Heading 3 #### Heading 4 ##### Heading 5 ###### Heading 6 . . Body text . Default body text is rendered like this: . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. . . Inline elements . Text can be bold, italic, or strikethrough. . Link to another page. . Text can be **bold**, _italic_, or ~~strikethrough~~. [Link to another page](another-page). . . Typographic Utilities . There are a number of specific typographic CSS classes that allow you to override default styling for font size, font weight, line height, and capitalization. . View typography utilities .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/ui-components/typography/",
    "relUrl": "/docs/just-the-docs_documentation/ui-components/typography/"
  }
  ,"25": {
    "title": "Typography",
    "content": "Typography Utilities . . Font size | Font weight | Line height | . Font size . Use the .fs-1 - .fs-10 to set an explicit font-size. . Class Small screen size font-size Large screen size font-size . .fs-1 | 9px | 10px | . .fs-2 | 11px | 12px | . .fs-3 | 12px | 14px | . .fs-4 | 14px | 16px | . .fs-5 | 16px | 18px | . .fs-6 | 18px | 24px | . .fs-7 | 24px | 32px | . .fs-8 | 32px | 38px | . .fs-9 | 38px | 42px | . .fs-10 | 42px | 48px | . Font size 1 . Font size 2 . Font size 3 . Font size 4 . Font size 5 . Font size 6 . Font size 7 . Font size 8 . Font size 9 . Font size 10 . In Markdown, use the `{: }` wrapper to apply custom classes: Font size 1 {: .fs-1 } Font size 2 {: .fs-2 } Font size 3 {: .fs-3 } Font size 4 {: .fs-4 } Font size 5 {: .fs-5 } Font size 6 {: .fs-6 } Font size 7 {: .fs-7 } Font size 8 {: .fs-8 } Font size 9 {: .fs-9 } Font size 10 {: .fs-10 } . Font weight . Use the .fw-300 - .fw-700 to set an explicit font-size. . Font weight 300 . Font weight 400 . Font weight 500 . Font weight 700 . In Markdown, use the `{: }` wrapper to apply custom classes: Font weight 300 {: .fw-300 } Font weight 400 {: .fw-400 } Font weight 500 {: .fw-500 } Font weight 700 {: .fw-700 } . Line height . Use the lh- classes to explicitly apply line height to text. . Class line-height value Notes . .lh-0 | 0 |   | . .lh-tight | 1.1 | Default for headings | . .lh-default | 1.4 | Default for body (paragraphs) | . No Line height No Line height . Tight line height Tight line height . Default line height Default line height . In Markdown, use the `{: }` wrapper to apply custom classes: No Line height No Line height {: .lh-0 } Tight line height Tight line height {: .lh-tight } Default line height Default line height {: .fh-default } .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/utilities/typography/",
    "relUrl": "/docs/just-the-docs_documentation/utilities/typography/"
  }
  ,"26": {
    "title": "UI Components",
    "content": "UI Components . To make it as easy as possible to write documentation in plain Markdown, most UI components are styled using default Markdown elements with few additional CSS classes needed. .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/ui-components",
    "relUrl": "/docs/just-the-docs_documentation/ui-components"
  }
  ,"27": {
    "title": "Utilities",
    "content": "Utilities . CSS utility classes come in handy when you to want to override default styles to create additional whitespace (margins/padding), correct unexpected shifts in font size or weight, add color, or hide (or show) something at a specific screen size. .",
    "url": "http://localhost:4000/docs/just-the-docs_documentation/utilities",
    "relUrl": "/docs/just-the-docs_documentation/utilities"
  }
  
}